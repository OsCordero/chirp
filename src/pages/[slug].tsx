import type {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
  NextPage,
} from "next";
import Head from "next/head";
import Image from "next/image";
import Layout from "~/components/Layout";
import { AbsoluteLoadingSpinner } from "~/components/Loading";
import PostView from "~/components/PostView";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";
import { api, type RouterOutputs } from "~/utils/api";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

type Author = RouterOutputs["profile"]["getUserByUsername"];

const ProfileFeed = ({ author }: { author: Author }) => {
  const { data, isLoading } = api.posts.getPostByUserId.useQuery({
    userId: author.id,
  });

  if (isLoading) return <AbsoluteLoadingSpinner />;
  if (!data || data.length === 0)
    return <div className="text-xl font-bold">No posts yet</div>;

  return (
    <div className="flex flex-col">
      {data.map((post) => (
        <PostView key={post.id} post={post} author={author} />
      ))}
    </div>
  );
};

const Profile: NextPage<PageProps> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username: username,
  });

  return (
    <>
      <Head>
        <title>{username} / Chirp</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="relative h-48 bg-slate-600">
          <Image
            src={data?.profileImageUrl || ""}
            alt="Profile Image"
            width={128}
            height={128}
            className="absolute bottom-0 left-0 -mb-16 ml-4 rounded-full border-4 border-black bg-black"
          />
        </div>
        <div className="h-16" />
        <div className="p-4 text-2xl font-bold">{`@${
          data?.username || ""
        }`}</div>

        <div className="w-full border-b border-slate-400" />
        {data ? <ProfileFeed author={data} /> : null}
      </Layout>
    </>
  );
};

export async function getStaticProps(
  context: GetStaticPropsContext<{ slug: string }>
) {
  const ssg = generateSSGHelper();
  const slug = context.params?.slug as string;
  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({ username });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
    revalidate: 1,
  };
}

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
export default Profile;
