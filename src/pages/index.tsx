import { SignIn, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";
import { toast } from "react-hot-toast";
import Layout from "~/components/Layout";
import LoadingSpinner, { AbsoluteLoadingSpinner } from "~/components/Loading";
import PostView from "~/components/PostView";
import { toastListErrors } from "~/helpers";

import { api, type RouterOutputs } from "~/utils/api";

const CreatePostWizard = () => {
  const { user } = useUser();
  const ctx = api.useContext();
  const { mutate, isLoading } = api.posts.createPost.useMutation({
    onSuccess: async () => {
      await ctx.posts.getAll.invalidate();
      setInput("");
    },
    onError: (e) => {
      const fieldErrors = e.data?.zodError?.fieldErrors;
      if (fieldErrors) {
        const allErrors = Object.values(fieldErrors).flat();
        toastListErrors(allErrors);
      } else {
        toast.error("Failed to post! Please try again later.");
      }
    },
  });
  const [input, setInput] = useState("");

  if (!user) return null;
  return (
    <div className="flex w-full items-center gap-3">
      <Image
        src={user.profileImageUrl}
        alt="Profile Image"
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
      />
      <form
        onSubmit={(e) => {
          e.preventDefault();
          mutate({ content: input });
        }}
        className="flex-growf flex w-full items-center"
      >
        <input
          type="text"
          placeholder="Add some emojis"
          className="grow bg-transparent p-4"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          disabled={isLoading}
        />
        {isLoading ? (
          <LoadingSpinner />
        ) : (
          <button disabled={isLoading} type="submit">
            Post
          </button>
        )}
      </form>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading } = api.posts.getAll.useQuery();

  return isLoading ? (
    <AbsoluteLoadingSpinner />
  ) : (
    <div className="flex flex-col ">
      {data?.map((fullPost) => (
        <PostView key={fullPost.post.id} {...fullPost} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const user = useUser();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex items-center  border-b border-slate-400 p-4">
          {user.isSignedIn ? (
            <CreatePostWizard />
          ) : (
            <div className="flex justify-center">
              <SignIn />
            </div>
          )}
        </div>
        <Feed />
      </Layout>
    </>
  );
};

export default Home;
